# Імпорт необхідних бібліотек


from google.colab import drive
drive.mount('/content/drive', force_remount=True)

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential, load_model
from keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D
from keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt


# Шлях до директорій з вхідними даними

input_path = '/content/drive/MyDrive/CT_mask/CT_scans_all_mask/'

train_dir = 'train'
val_dir = 'val'
test_dir = 'test'

# Розмірність зображення

img_width, img_height, img_channels = 128, 128, 3
input_shape = (img_width, img_height, img_channels)

# Моя модель


model = Sequential()

# Згортковий шар з 32 фільтрами, ядром 3х3 та функцією активації ReLU
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=input_shape))

# Поліновувальний шар з розміром ядра 2х2 та кроком 2х2
model.add(MaxPooling2D(pool_size=(2, 2)))

# Згортковий шар з 64 фільтрами, ядром 3х3 та функцією активації ReLU
model.add(Conv2D(64, (3, 3), activation='relu'))

# Поліновувальний шар з розміром ядра 2х2 та кроком 2х2
model.add(MaxPooling2D(pool_size=(2, 2)))

# Згортковий шар з 128 фільтрами, ядром 3х3 та функцією активації ReLU
model.add(Conv2D(128, (3, 3), activation='relu'))

# Поліновувальний шар з розміром ядра 2х2 та кроком 2х2
model.add(MaxPooling2D(pool_size=(2, 2)))

# Повнозв'язний шар з 150 нейронами та функцією активації ReLU
model.add(Flatten())
model.add(Dense(256, activation='relu'))

# Dropout шар з параметром випадкового вибору ваг 0,5
model.add(Dropout(0.5))

# Повнозв'язний шар з 1 нейроном та функцією активації sigmoid
model.add(Dense(1, activation='sigmoid'))

# Компілюємо модель

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Виводимо опис моделі

model.summary()

# Створення ImageDataGenerator'ів

train_datagen = ImageDataGenerator(rescale=1./255)

validation_datagen = ImageDataGenerator(rescale=1./255)

test_datagen = ImageDataGenerator(rescale=1./255)



train_generator = train_datagen.flow_from_directory(
    input_path+train_dir,
    target_size=(img_width, img_height),
    batch_size=500,
    class_mode='binary')

validation_generator = validation_datagen.flow_from_directory(
    input_path+val_dir,
    target_size=(img_width, img_height),
    batch_size=100,
    class_mode='binary')

test_generator = test_datagen.flow_from_directory(
    input_path+test_dir,
    target_size=(img_width, img_height),
    batch_size=100,
    class_mode='binary')

# Тренування моделі з кількістю епох = epochs, з виводом інформації за кожну епоху

train_acc_arr = list()
val_acc_arr = list()
test_acc_arr = list()

train_loss_arr = list()
val_loss_arr = list()
test_loss_arr = list()

# Тренування 30 епох моєї моделі

epochs = 30
for i in range(epochs):
    print('epoch: {}/{}'.format(i+1, epochs))
    history = model.fit(
        train_generator,
        epochs=1,
        validation_data=validation_generator)
    train_acc_arr.append(history.history['accuracy'][0])
    val_acc_arr.append(history.history['val_accuracy'][0])

    train_loss_arr.append(history.history['loss'][0])
    val_loss_arr.append(history.history['val_loss'][0])


x = [i for i in range(1, epochs+1)]

plt.title('Accuracy')
plt.plot(x, train_acc_arr)
plt.plot(x, val_acc_arr)
# plt.plot(x, test_acc_arr)

plt.xlabel('epochs')
plt.ylabel('value')
plt.grid()
plt.legend(['train', 'val', 'test'])

plt.title('loss')
plt.plot(x, train_loss_arr)
plt.plot(x, val_loss_arr)
# plt.plot(x, test_loss_arr)
plt.xlabel('epochs')
plt.ylabel('value')
plt.grid()
plt.legend(['train', 'val', 'test'])

name = 'all_scans_30_epochs.h5'
model.save('/content/drive/MyDrive/models/'+name)



model = load_model('/content/drive/MyDrive/models/all_scans_30_epochs.h5')

def predict_scan(model, path):
    image = tf.keras.utils.load_img(path,

                                    target_size=(img_width, img_height)
                                   )
    input_arr = tf.keras.utils.img_to_array(image)
    input_arr = np.array([input_arr])  # Convert single image to a batch.
    predictions = model.predict(input_arr)
    return predictions

import os
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from collections import Counter

path_covid = '/content/drive/MyDrive/CT_mask/CT_scans_all_mask/test/covid'
path_healthy = '/content/drive/MyDrive/CT_mask/CT_scans_all_mask/test/healthy'

predictions = []
true_labels = []

files = os.listdir(path_covid)

for file in files:
    if file.endswith(".tiff") or file.endswith(".png"):
        file_path = os.path.join(path_covid, file)
        prediction = predict_scan(model, file_path)
        predictions.append(prediction)
        true_labels.append("COVID-19")

files = os.listdir(path_healthy)

for file in files:
    if file.endswith(".tiff") or file.endswith(".png"):
        file_path = os.path.join(path_healthy, file)
        prediction = predict_scan(model, file_path)
        predictions.append(prediction)
        true_labels.append("Healthy")

predicted_labels = ["Healthy" if pred[0][0] >= 0.5 else "COVID-19" for pred in predictions]


counter = Counter(predicted_labels)
frequency = counter.most_common()
for item, count in frequency:
    print(f"{item}: {count}")

accuracy = accuracy_score(true_labels, predicted_labels)
print(f"Точність: {accuracy}")

print('\nFor COVID-19:')

precision = precision_score(true_labels, predicted_labels, pos_label="COVID-19")
print(f"Precision (COVID-19): {precision}")

recall = recall_score(true_labels, predicted_labels, pos_label="COVID-19")
print(f"Recall (COVID-19): {recall}")

f1 = f1_score(true_labels, predicted_labels, pos_label="COVID-19")
print(f"F1-показник (COVID-19): {f1}")

print('\nFor Healthy:')

precision = precision_score(true_labels, predicted_labels, pos_label="Healthy")
print(f"Precision (Healthy): {precision}")

recall = recall_score(true_labels, predicted_labels, pos_label="Healthy")
print(f"Recall (Healthy): {recall}")

f1 = f1_score(true_labels, predicted_labels, pos_label="Healthy")
print(f"F1-показник (Healthy): {f1}")
